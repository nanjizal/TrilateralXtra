package trilateralXtra.segment;
import trilateral.tri.Trilateral;
import trilateral.tri.TrilateralArray;
import trilateral.tri.Triangle;
import trilateral.tri.TriangleArray;
// Used to emulate 16 segment display, can be used for rough letters.
class SixteenSegColor{
    public var lightID: Int; // ColorID of segment on say the id of Red
    public var darkID:  Int; // ColorID of segment off say the id of black
    public var width: Float;
    public var height: Float;
    public var sx: Float = 1.;
    public var sy: Float = 1.;
    public var x: Float;
    public var y: Float;
    public var spacing: Float;
    public var triArr: TriangleArray;
    public var digitID: Int = 0;
    public var startID: Int;
    public var endID: Int;
    public function new( width_: Float, height_: Float, lightID_: Int, darkID_: Int, ?triangleArray_: TriangleArray = null ){
        height  = height_;
        width   = width_;
        lightID = lightID_;
        darkID  = darkID_;
        sx      = width/11;
        sy      = height/18;
        spacing = width * 14/11;
        triArr  = ( triangleArray_ == null )? new TriangleArray(): triangleArray_;
        startID = triArr.length;
    }
    public function color( id: Int, color: Int ){
        triArr.changeFillColorByID( id, color, startID, endID );
    }
    public inline
    function stringWidth( str: String ): Float {
        var l = str.length;
        var space = 0.;
        for( i in 0...l ){
            space += spacing;
        }
        return space;
    }
    public inline
    function addNumber( val: Int, x_: Float, y_: Float, ?centre: Bool = false ){
        var str = Std.string( val );
        add( str, x_, y_, centre );
    }
    public inline
    function add( str: String, x_: Float, y_: Float, ?centre: Bool = false ){
        var l = str.length;
        var space = 0.;
        if( centre ){
            for( i in 0...l ) space += spacing;
            space -= width * 14/11;// centreX makes assumption for simplicity see spacing in constructor.
            space = -space/2;
            y_ = y_ - height/2;
        }
        for( i in 0...l ){
            addChar( str.substr( i, 1 ), x_ + space, y_ );
            space += spacing;
        }
    }
    public inline function changeString( str: String ){
        var l = str.length;
        for( i in 0...l ){
            changeChar( str.substr( i, 1 ), i );
        }
    }
    public inline
    function changeChar( str: String, digit: Int ){
        var id = startID + Std.int( digit*16 );
        switch( str ){
            case '!':   //b(); c(); // dp();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id + 15, darkID );
            case '"':   //f(); b();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id + 15, darkID );
            case '#':   //f(); e(); d(); g(); i(); l();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '$':   //a(); f(); g(); c(); d(); i(); l();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '%':   //a1(); f(); g(); c(); d2(); i(); j(); k(); l();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, lightID ); color(id +15, darkID );
            case '&':   //a1(); f(); h(); g1(); e(); d(); m(); j();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case "'":   //b();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '(':   //j(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case ')':   //h(); k();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '*':   //g(); h(); i(); j(); k(); l(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, lightID ); color(id + 11, lightID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, lightID ); color(id +15, lightID );
            case '+':   //i(); g(); l();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case ',':   //d1();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '-':   //g();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '.':   //dp();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '/':   //j(); k();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '0':   //a(); b(); c(); d(); e(); f(); j(); k();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '1':   //b(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '2':   //a(); b(); g(); e(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '3':   //a(); b(); g(); c(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '4':   //f(); g(); b(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '5':   //a(); f(); g(); c(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '6':   //a(); f(); g(); e(); c(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '7':   //a(); b(); c();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '8':   //a(); b(); c(); d(); e(); f(); g();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '9':   //a(); b(); f(); g(); c(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case ':':   //g1(); d1();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case ';':   //a1(); k();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '<':   //j(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case '=':   //g(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '>':   //h(); k();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '?':   //a2(); b(); g2(); l(); //dp();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '@':   //a(); b(); c(); d(); e(); g1(); l();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'A':   //e(); f(); a1(); a2(); b(); c(); g();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'B':   //a(); b(); c(); d(); g2(); l(); i();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'C':   //a(); f(); e(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'D':   //a(); b(); c(); d(); i(); l();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'E':   //a(); f(); g1(); e(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'F':   //a(); f(); g1(); e();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'G':   //a(); f(); e(); d(); c(); g2();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'H':   //f(); g(); b(); c(); e();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'I':   //a(); i(); l(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'J':   //b(); c(); d(); e();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'K':   //f(); g1(); e(); j(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'L':   //f(); e(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'M':   //e(); f(); h(); j(); b(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'N':   //e(); f(); h(); m(); c(); b();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'O':   //a(); b(); c(); d(); e(); f();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'P':   //a(); b(); g(); f(); e(); 
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'Q':   //a(); b(); c(); d(); e(); f(); m();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'R':   //a(); b(); g(); m(); f(); e();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, lightID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'S':   //a(); f(); g(); c(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'T':   //a(); i(); l();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'U':   //f(); e(); d(); c(); b(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'V':   //f(); e(); j(); k();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'W':   //f(); e(); k(); m(); c(); b();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'X':   //h(); j(); k(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'Y':   //h(); j(); l();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'Z':   //a(); j(); k(); d();
                color(id, lightID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, lightID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '[':   //a2(); i(); l(); d2();
                color(id, darkID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '\\':  //h(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case ']':   //a1(); i(); l(); d1();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '^':    //k(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case '_':   //d1(); d2();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case '`':   //h();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID ); color(id + 10, lightID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'a':   //g1(); e(); l(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'b':   //f(); g1(); g2(); c(); d(); e();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID ); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'c':   //g(); e(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID ); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'd':   //b(); g(); e(); d(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, lightID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'e':   //g1(); e(); k(); d1(); d2();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'f':   //a2(); i(); g(); l();
                color(id, darkID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'g':   //g1(); e(); k(); m(); d2();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'h':   //f(); g(); c(); e();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'i':   //a1(); g1(); l(); d();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'j':   //a2(); g2(); c(); d();
                color(id, darkID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'k':   //f(); g(); m(); e();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, lightID ); 
                color(id + 8, lightID ); color(id + 9, lightID ); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'l':   //a1(); i(); l(); d2();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID ); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'm':   //e(); g(); l(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'n':   //e(); g(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'o':   //e(); g(); d(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'p':   // f(), a1(), i(), g1(), e()
                color( id, lightID ); color( id + 1, darkID ); color( id + 2, darkID ); color( id + 3, darkID );
                color( id + 4, darkID ); color( id + 5, darkID ); color( id + 6, lightID); color( id + 7, lightID ); 
                color( id + 8, lightID ); color( id + 9, darkID); color( id + 10, darkID ); color( id + 11, lightID ); 
                color( id + 12, darkID ); color( id + 13, darkID ); color( id + 14, darkID ); color( id +15, darkID );
            case 'q':   // f(); a1(); i(); g1(); l();
                color( id, lightID ); color( id + 1, darkID ); color( id + 2, darkID ); color( id + 3, darkID );
                color( id + 4, darkID ); color( id + 5, darkID ); color( id + 6, darkID); color( id + 7, lightID ); 
                color( id + 8, lightID ); color( id + 9, darkID); color( id + 10, darkID ); color( id + 11, lightID ); 
                color( id + 12, darkID ); color( id + 13, darkID ); color( id + 14, lightID ); color( id +15, darkID );
            case 'r':   //e(); g();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 's':   //g2(); m(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 't':   //i(); g(); l(); d2();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case 'u':   //e(); d(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'v':   //e(); k();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case 'w':   //e(); k(); m(); c();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, lightID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'x':   //g(); k(); m();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'y':   //m(); c(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, lightID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, darkID ); color(id +15, lightID );
            case 'z':   //g1(); k(); d1();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, darkID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '{':   //a2(); i(); g1(); l(); d2();
                color(id, darkID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '|':   //i(); l();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, darkID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '}':   //a1(); i(); g2(); l(); d1();
                color(id, lightID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, darkID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
            case '£':   //a2(); i(); g(); k(); d();
                color(id, darkID ); color(id + 1, lightID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, darkID ); color(id + 5, darkID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, lightID ); color(id + 14, darkID ); color(id +15, darkID );
            case '±':   //i(); g(); l(); d();
                color(id, darkID ); color(id + 1, darkID ); color(id + 2, darkID ); color(id + 3, darkID );
                color(id + 4, lightID ); color(id + 5, lightID ); color(id + 6, darkID); color(id + 7, darkID ); 
                color(id + 8, lightID ); color(id + 9, lightID); color(id + 10, darkID ); color(id + 11, lightID ); 
                color(id + 12, darkID ); color(id + 13, darkID ); color(id + 14, lightID ); color(id +15, darkID );
        }
        digitID += 16;
        endID = triArr.length;
    }
    public inline
    function addChar( str: String, x_: Float, y_: Float ){
        var id = startID + digitID;
        x = x_;
        y = y_;
        switch( str ){
            case '!':   //b(); c(); // dp();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id + 15, darkID );
            case '"':   //f(); b();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id + 15, darkID );
            case '#':   //f(); e(); d(); g(); i(); l();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '$':   //a(); f(); g(); c(); d(); i(); l();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '%':   //a1(); f(); g(); c(); d2(); i(); j(); k(); l();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, lightID ); m( id +15, darkID );
            case '&':   //a1(); f(); h(); g1(); e(); d(); m(); j();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case "'":   //b();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '(':   //j(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case ')':   //h(); k();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '*':   //g(); h(); i(); j(); k(); l(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, lightID ); i( id + 11, lightID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, lightID ); m( id +15, lightID );
            case '+':   //i(); g(); l();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case ',':   //d1();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '-':   //g();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '.':   //dp();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '/':   //j(); k();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '0':   //a(); b(); c(); d(); e(); f(); j(); k();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '1':   //b(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '2':   //a(); b(); g(); e(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '3':   //a(); b(); g(); c(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '4':   //f(); g(); b(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '5':   //a(); f(); g(); c(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '6':   //a(); f(); g(); e(); c(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '7':   //a(); b(); c();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '8':   //a(); b(); c(); d(); e(); f(); g();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '9':   //a(); b(); f(); g(); c(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case ':':   //g1(); d1();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case ';':   //a1(); k();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '<':   //j(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case '=':   //g(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '>':   //h(); k();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '?':   //a2(); b(); g2(); l(); //dp();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '@':   //a(); b(); c(); d(); e(); g1(); l();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'A':   //e(); f(); a1(); a2(); b(); c(); g();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'B':   //a(); b(); c(); d(); g2(); l(); i();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'C':   //a(); f(); e(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'D':   //a(); b(); c(); d(); i(); l();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'E':   //a(); f(); g1(); e(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'F':   //a(); f(); g1(); e();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'G':   //a(); f(); e(); d(); c(); g2();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'H':   //f(); g(); b(); c(); e();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'I':   //a(); i(); l(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'J':   //b(); c(); d(); e();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'K':   //f(); g1(); e(); j(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'L':   //f(); e(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'M':   //e(); f(); h(); j(); b(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'N':   //e(); f(); h(); m(); c(); b();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'O':   //a(); b(); c(); d(); e(); f();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'P':   //a(); b(); g(); f(); e(); 
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'Q':   //a(); b(); c(); d(); e(); f(); m();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'R':   //a(); b(); g(); m(); f(); e();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, lightID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'S':   //a(); f(); g(); c(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'T':   //a(); i(); l();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'U':   //f(); e(); d(); c(); b(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'V':   //f(); e(); j(); k();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'W':   //f(); e(); k(); m(); c(); b();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'X':   //h(); j(); k(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'Y':   //h(); j(); l();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'Z':   //a(); j(); k(); d();
                a1( id, lightID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, lightID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '[':   //a2(); i(); l(); d2();
                a1( id, darkID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '\\':  //h(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case ']':   //a1(); i(); l(); d1();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '^':    //k(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case '_':   //d1(); d2();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case '`':   //h();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID ); h( id + 10, lightID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'a':   //g1(); e(); l(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'b':   //f(); g1(); g2(); c(); d(); e();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID ); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'c':   //g(); e(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID ); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'd':   //b(); g(); e(); d(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, lightID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'e':   //g1(); e(); k(); d1(); d2();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'f':   //a2(); i(); g(); l();
                a1( id, darkID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'g':   //g1(); e(); k(); m(); d2();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'h':   //f(); g(); c(); e();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'i':   //a1(); g1(); l(); d();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'j':   //a2(); g2(); c(); d();
                a1( id, darkID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'k':   //f(); g(); m(); e();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID ); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'l':   //a1(); i(); l(); d2();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID ); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'm':   //e(); g(); l(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'n':   //e(); g(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'o':   //e(); g(); d(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'p':   // f(), a1(), i(), g1(), e()
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'q':   // f(); a1(); i(); g1(); l();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, lightID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'r':   //e(); g();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 's':   //g2(); m(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 't':   //i(); g(); l(); d2();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case 'u':   //e(); d(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'v':   //e(); k();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case 'w':   //e(); k(); m(); c();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, lightID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'x':   //g(); k(); m();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'y':   //m(); c(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, lightID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, darkID ); m( id +15, lightID );
            case 'z':   //g1(); k(); d1();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, darkID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '{':   //a2(); i(); g1(); l(); d2();
                a1( id, darkID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '|':   //i(); l();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, darkID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '}':   //a1(); i(); g2(); l(); d1();
                a1( id, lightID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, darkID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
            case '£':   //a2(); i(); g(); k(); d();
                a1( id, darkID ); a2( id + 1, lightID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, darkID ); d2( id + 5, darkID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, lightID ); l( id + 14, darkID ); m( id +15, darkID );
            case '±':   //i(); g(); l(); d();
                a1( id, darkID ); a2( id + 1, darkID ); b( id + 2, darkID ); c( id + 3, darkID );
                d1( id + 4, lightID ); d2( id + 5, lightID ); e( id + 6, darkID); f( id + 7, darkID ); 
                g1( id + 8, lightID ); g2( id + 9, lightID); h( id + 10, darkID ); i( id + 11, lightID ); 
                j( id + 12, darkID ); k( id + 13, darkID ); l( id + 14, lightID ); m( id +15, darkID );
        }
        digitID += 16;
        endID = triArr.length;
    }
    inline
    function a( id: Int, color: Int ){
        a1( id, color );
        a2( id, color );
    }
    inline
    function g( id: Int, color: Int ){
        g1( id, color );
        g2( id, color );
    }
    inline
    function d( id: Int, color: Int ){
        d1( id, color );
        d2( id, color );
    }
    inline
    function triFactory( id: Int, ax: Float, ay: Float, bx: Float, by: Float, cx: Float, cy: Float, colorID: Int ): Triangle {
        return Triangle.fromTrilateral( id
                                    ,   new Trilateral( x+sx*ax, y+sy*ay, x+sx*bx, y+sy*by, x+sx*cx, y+sy*cy )
                                    ,   0
                                    ,   colorID );
    }
    inline
    function a1( id: Int, color: Int){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 1., 0.5,    1.5, 0.,          5.,         0., color);
        l_++;
        tri[ l_ ] = triFactory( id, 1., 0.5,    5., 0.,           5. + third, 0.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 1., 0.5,    5 + third, 0.5,   5 + third, 2., color );
        l_++;
        tri[ l_ ] = triFactory( id, 1., 0.5,    5 + third, 2.,    2.5,      2., color );
    }
    inline
    function a2( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 6. - third, 0.5,   6., 0.,    9.5,       0., color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 0.5,   9.5, 0.,   10.,       0.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 0.5,   10., 0.5,  8.5,       2., color );
        l_++;
        tri[ l_ ] = triFactory( id, 6 - third, 0.5,    8.5, 2.,  6 - third, 2., color );
    }
    inline
    function b( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 9., 2.5, 10.5, 1., 11., 1.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 2.5, 11., 1.5, 11., 7.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 7.5, 11., 7.5, 10.5, 8.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 2.5, 11., 7.5, 9., 7.5, color );
    }
    inline
    function c( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 9., 10.5, 10.5, 9.5, 11., 10.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 10.5, 11., 10.5, 11., 16.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 10.5, 11., 16.5, 9., 15.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 9., 15.5, 11., 16.5, 10.5, 17., color );
    } 
    inline
    function d1( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 1., 17.5,        2.5, 16.,    5. + third, 16., color );
        l_++;
        tri[ l_ ] = triFactory( id, 1., 17.5, 5. + third, 16.,    5. + third, 17.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 1., 17.5, 5. + third, 17.5,   5., 18., color );
        l_++;
        tri[ l_ ] = triFactory( id, 1., 17.5,         5., 18.,    1.5, 18., color );
        l_++;
    }
    inline
    function d2( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 6. - third, 17.5,   6. - third, 16., 8.5, 16., color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 17.5,   8.5, 16.,        10., 17.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 17.5,   10, 17.5,       9.5, 18., color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 17.5,   9.5, 18.,        6., 18., color );
    }
    inline
    function e( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 0., 10.5, 0.5, 9.5, 2., 10.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 10.5, 2., 10.5, 2., 15.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 10.5, 2., 15.5, 0., 16., color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 16., 2., 15.5, 0.5, 17, color );
    }
    inline
    function f( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 0., 1.5, 0.5, 1., 2., 2.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 1.5, 2., 2.5, 2., 7.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 1.5, 2., 7.5, 0., 7.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 0., 7.5, 2., 7.5, 0.5, 8.5, color );
    }
    inline
    function g1( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 0.5, 9.,    2.5,        8.,  2.5,       10., color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 8.,    5. + third, 8.,  5 + third, 10., color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 8.,    5. + third, 10., 2.5,       10., color );
    }
    inline
    function g2( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        var third = 1/3;
        tri[ l_ ] = triFactory( id, 6. - third, 8.,       8.5,   8.,     8.5, 10.,        color );
        l_++;
        tri[ l_ ] = triFactory( id, 6. - third, 8,      8.5,  10.,    6. - third, 10., color );
        l_++;
        tri[ l_ ] = triFactory( id, 8.5,        8.,       10.5,  9.,     8.5, 10.,        color );
    }
    inline
    function h( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 2.5, 2.5,  3.5, 2.5,  4., 4., color );
        l_++;
        tri[ l_ ] = triFactory( id, 4., 4.,    5., 7.5,   4., 7.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 2.5,  4., 4.,    2.5, 5., color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 5.,   4., 4.,    4., 7.5, color );
    }
    inline
    function i( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 4.5, 2.5, 6.5, 2.5, 6.5, 4., color );
        l_++;
        tri[ l_ ] = triFactory( id, 4.5, 2.5, 6.5, 4., 4.5, 4., color );
        l_++;
        tri[ l_ ] = triFactory( id, 4.5, 4., 6.5, 4., 5.5, 7.5, color );
    }
    inline
    function j( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 6.5, 7.5, 7., 4., 7., 7.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 7., 4., 7.5, 2.5, 8.5, 2.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 7., 4., 8.5, 2.5, 8.5, 4., color );
        l_++;
        tri[ l_ ] = triFactory( id, 7., 4., 8.5, 4., 7., 7.5, color );
    }
    inline
    function k( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 2.5, 13.,    4., 10.5,     5., 10.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 13.,    5, 10.5,    4., 14., color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 13.,    4., 14.,      3.5, 15., color );
        l_++;
        tri[ l_ ] = triFactory( id, 2.5, 13.,    3.5, 15.,     2.5, 15., color );
    }
    inline
    function l( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 4.5, 14., 5.5, 10.5, 6.5, 14., color );
        l_++;
        tri[ l_ ] = triFactory( id, 4.5, 14., 6.5, 14., 6.5, 15.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 4.5, 14., 6.5, 15.5, 4.5, 15.5, color );
    }
    inline
    function m( id: Int, color: Int ){
        var tri = triArr;
        var l_ = tri.length;
        tri[ l_ ] = triFactory( id, 6., 10.5, 6.5, 10., 8.5, 13., color );
        l_++;
        tri[ l_ ] = triFactory( id, 6., 10.5, 8.5, 13., 7., 14., color );
        l_++;
        tri[ l_ ] = triFactory( id, 7., 14., 8.5, 13., 8.5, 15.5, color );
        l_++;
        tri[ l_ ] = triFactory( id, 7., 14., 8.5, 15.5, 7.5, 15.5, color );
    }
}